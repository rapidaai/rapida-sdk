syntax = "proto3";
package endpoint_api;
option go_package = "github.com/lexatic/web-backend/protos/lexatic-backend";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "common.proto";

message InvokerError {
  uint64 errorCode = 1 [ jstype = JS_STRING ];
  string errorMessage = 2;
  string humanMessage = 3;
}

message EndpointDefinition {
  uint64 endpointId = 1 [ jstype = JS_STRING ];
  string version = 2;
}

message InvokeRequest {
  EndpointDefinition endpoint = 1;
  map<string, string> argsV1 = 2;
  map<string, string> metadata = 3;
  map<string, string> options = 4;
  map<string, google.protobuf.Any> args = 5;
}

message CallerResponse {
  uint64 requestId = 1;
  string response = 2;
  uint64 timeTaken = 3;
  repeated Content responses = 4;
  InvokerError error = 5;
  repeated Metric metrics = 6;
  google.protobuf.Struct meta = 7;
}

message InvokeResponse {
  int32 code = 1;
  bool success = 2;
  CallerResponse data = 3;
  InvokerError error = 4;
}

message UpdateRequest {
  uint64 requestId = 1 [ jstype = JS_STRING ];
  google.protobuf.Struct metadata = 2;
}

message UpdateResponse {
  int32 code = 1;
  bool success = 2;
  InvokerError error = 3;
}

message ProbeRequest { uint64 requestId = 1 [ jstype = JS_STRING ]; }

message ProbeResponse {
  int32 code = 1;
  bool success = 2;
  google.protobuf.Struct data = 3;
  InvokerError error = 4;
}

service Deployment {
  rpc Invoke(InvokeRequest) returns (InvokeResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
  rpc Probe(ProbeRequest) returns (ProbeResponse);
}
