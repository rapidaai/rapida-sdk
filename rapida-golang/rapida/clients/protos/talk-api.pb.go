// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.3
// source: talk-api.proto

package lexatic_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RAGStage int32

const (
	RAGStage_UNDEFINED_STAGE       RAGStage = 0
	RAGStage_QUERY_FORMULATION     RAGStage = 1
	RAGStage_INFORMATION_RETRIEVAL RAGStage = 2
	RAGStage_DOCUMENT_RETRIEVAL    RAGStage = 3
	RAGStage_CONTEXT_AUGMENTATION  RAGStage = 4
	RAGStage_TEXT_GENERATION       RAGStage = 5
	RAGStage_OUTPUT_EVALUATION     RAGStage = 6
)

// Enum value maps for RAGStage.
var (
	RAGStage_name = map[int32]string{
		0: "UNDEFINED_STAGE",
		1: "QUERY_FORMULATION",
		2: "INFORMATION_RETRIEVAL",
		3: "DOCUMENT_RETRIEVAL",
		4: "CONTEXT_AUGMENTATION",
		5: "TEXT_GENERATION",
		6: "OUTPUT_EVALUATION",
	}
	RAGStage_value = map[string]int32{
		"UNDEFINED_STAGE":       0,
		"QUERY_FORMULATION":     1,
		"INFORMATION_RETRIEVAL": 2,
		"DOCUMENT_RETRIEVAL":    3,
		"CONTEXT_AUGMENTATION":  4,
		"TEXT_GENERATION":       5,
		"OUTPUT_EVALUATION":     6,
	}
)

func (x RAGStage) Enum() *RAGStage {
	p := new(RAGStage)
	*p = x
	return p
}

func (x RAGStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RAGStage) Descriptor() protoreflect.EnumDescriptor {
	return file_talk_api_proto_enumTypes[0].Descriptor()
}

func (RAGStage) Type() protoreflect.EnumType {
	return &file_talk_api_proto_enumTypes[0]
}

func (x RAGStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RAGStage.Descriptor instead.
func (RAGStage) EnumDescriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{0}
}

type AssistantConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssistantConversationId uint64                   `protobuf:"varint,2,opt,name=assistantConversationId,proto3" json:"assistantConversationId,omitempty"`
	RequestRole             string                   `protobuf:"bytes,4,opt,name=requestRole,proto3" json:"requestRole,omitempty"`
	Request                 *Message                 `protobuf:"bytes,5,opt,name=request,proto3" json:"request,omitempty"`
	ResponseRole            string                   `protobuf:"bytes,6,opt,name=responseRole,proto3" json:"responseRole,omitempty"`
	Response                *Message                 `protobuf:"bytes,7,opt,name=response,proto3" json:"response,omitempty"`
	ExternalAuditId         uint64                   `protobuf:"varint,8,opt,name=externalAuditId,proto3" json:"externalAuditId,omitempty"`
	Source                  string                   `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	Metrics                 []*Metric                `protobuf:"bytes,10,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Status                  string                   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	CreatedBy               uint64                   `protobuf:"varint,12,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy               uint64                   `protobuf:"varint,13,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	SuggestedQuestions      []string                 `protobuf:"bytes,14,rep,name=suggestedQuestions,proto3" json:"suggestedQuestions,omitempty"`
	Stages                  []*AssistantMessageStage `protobuf:"bytes,15,rep,name=stages,proto3" json:"stages,omitempty"`
	CreatedDate             *timestamppb.Timestamp   `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate             *timestamppb.Timestamp   `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
}

func (x *AssistantConversationMessage) Reset() {
	*x = AssistantConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantConversationMessage) ProtoMessage() {}

func (x *AssistantConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantConversationMessage.ProtoReflect.Descriptor instead.
func (*AssistantConversationMessage) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{0}
}

func (x *AssistantConversationMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantConversationMessage) GetAssistantConversationId() uint64 {
	if x != nil {
		return x.AssistantConversationId
	}
	return 0
}

func (x *AssistantConversationMessage) GetRequestRole() string {
	if x != nil {
		return x.RequestRole
	}
	return ""
}

func (x *AssistantConversationMessage) GetRequest() *Message {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AssistantConversationMessage) GetResponseRole() string {
	if x != nil {
		return x.ResponseRole
	}
	return ""
}

func (x *AssistantConversationMessage) GetResponse() *Message {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AssistantConversationMessage) GetExternalAuditId() uint64 {
	if x != nil {
		return x.ExternalAuditId
	}
	return 0
}

func (x *AssistantConversationMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AssistantConversationMessage) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AssistantConversationMessage) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AssistantConversationMessage) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AssistantConversationMessage) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *AssistantConversationMessage) GetSuggestedQuestions() []string {
	if x != nil {
		return x.SuggestedQuestions
	}
	return nil
}

func (x *AssistantConversationMessage) GetStages() []*AssistantMessageStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *AssistantConversationMessage) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantConversationMessage) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

type CreateAssistantMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assistant parameter
	AssistantId              uint64 `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	AssistantProviderModelId uint64 `protobuf:"varint,2,opt,name=assistantProviderModelId,proto3" json:"assistantProviderModelId,omitempty"`
	// actual message
	Message                 *Message `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	AssistantConversationId *uint64  `protobuf:"varint,4,opt,name=assistantConversationId,proto3,oneof" json:"assistantConversationId,omitempty"`
	// metadata
	Metadata map[string]*anypb.Any `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// source
	Source Source `protobuf:"varint,7,opt,name=source,proto3,enum=Source" json:"source,omitempty"`
	// identifier
	Identifier *ResourceIdentifier `protobuf:"bytes,5,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
}

func (x *CreateAssistantMessageRequest) Reset() {
	*x = CreateAssistantMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantMessageRequest) ProtoMessage() {}

func (x *CreateAssistantMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantMessageRequest.ProtoReflect.Descriptor instead.
func (*CreateAssistantMessageRequest) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAssistantMessageRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *CreateAssistantMessageRequest) GetAssistantProviderModelId() uint64 {
	if x != nil {
		return x.AssistantProviderModelId
	}
	return 0
}

func (x *CreateAssistantMessageRequest) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *CreateAssistantMessageRequest) GetAssistantConversationId() uint64 {
	if x != nil && x.AssistantConversationId != nil {
		return *x.AssistantConversationId
	}
	return 0
}

func (x *CreateAssistantMessageRequest) GetMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateAssistantMessageRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_WEB_PLUGIN
}

func (x *CreateAssistantMessageRequest) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type AssistantMessageStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage          RAGStage          `protobuf:"varint,1,opt,name=stage,proto3,enum=talk_api.RAGStage" json:"stage,omitempty"`
	AdditionalData map[string]string `protobuf:"bytes,2,rep,name=additionalData,proto3" json:"additionalData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timetaken      uint64            `protobuf:"varint,3,opt,name=timetaken,proto3" json:"timetaken,omitempty"`
}

func (x *AssistantMessageStage) Reset() {
	*x = AssistantMessageStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantMessageStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantMessageStage) ProtoMessage() {}

func (x *AssistantMessageStage) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantMessageStage.ProtoReflect.Descriptor instead.
func (*AssistantMessageStage) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{2}
}

func (x *AssistantMessageStage) GetStage() RAGStage {
	if x != nil {
		return x.Stage
	}
	return RAGStage_UNDEFINED_STAGE
}

func (x *AssistantMessageStage) GetAdditionalData() map[string]string {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *AssistantMessageStage) GetTimetaken() uint64 {
	if x != nil {
		return x.Timetaken
	}
	return 0
}

type CreateAssistantMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool                          `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data    *AssistantConversationMessage `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Error   *Error                        `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateAssistantMessageResponse) Reset() {
	*x = CreateAssistantMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAssistantMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAssistantMessageResponse) ProtoMessage() {}

func (x *CreateAssistantMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAssistantMessageResponse.ProtoReflect.Descriptor instead.
func (*CreateAssistantMessageResponse) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAssistantMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateAssistantMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateAssistantMessageResponse) GetData() *AssistantConversationMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateAssistantMessageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type AssistantConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           uint64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId                       uint64                          `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	AssistantId                  uint64                          `protobuf:"varint,3,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Name                         string                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId                    uint64                          `protobuf:"varint,5,opt,name=projectId,proto3" json:"projectId,omitempty"`
	OrganizationId               uint64                          `protobuf:"varint,6,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	Source                       string                          `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
	CreatedBy                    uint64                          `protobuf:"varint,8,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy                    uint64                          `protobuf:"varint,9,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	User                         *User                           `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	AssistantProviderModelId     uint64                          `protobuf:"varint,12,opt,name=assistantProviderModelId,proto3" json:"assistantProviderModelId,omitempty"`
	AssistantConversationMessage []*AssistantConversationMessage `protobuf:"bytes,13,rep,name=assistantConversationMessage,proto3" json:"assistantConversationMessage,omitempty"`
	CreatedDate                  *timestamppb.Timestamp          `protobuf:"bytes,26,opt,name=createdDate,proto3" json:"createdDate,omitempty"`
	UpdatedDate                  *timestamppb.Timestamp          `protobuf:"bytes,27,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
}

func (x *AssistantConversation) Reset() {
	*x = AssistantConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssistantConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssistantConversation) ProtoMessage() {}

func (x *AssistantConversation) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssistantConversation.ProtoReflect.Descriptor instead.
func (*AssistantConversation) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{4}
}

func (x *AssistantConversation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssistantConversation) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AssistantConversation) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *AssistantConversation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssistantConversation) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AssistantConversation) GetOrganizationId() uint64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *AssistantConversation) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AssistantConversation) GetCreatedBy() uint64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *AssistantConversation) GetUpdatedBy() uint64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *AssistantConversation) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AssistantConversation) GetAssistantProviderModelId() uint64 {
	if x != nil {
		return x.AssistantProviderModelId
	}
	return 0
}

func (x *AssistantConversation) GetAssistantConversationMessage() []*AssistantConversationMessage {
	if x != nil {
		return x.AssistantConversationMessage
	}
	return nil
}

func (x *AssistantConversation) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AssistantConversation) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

type GetAllAssistantConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId uint64      `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	Paginate    *Paginate   `protobuf:"bytes,2,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias   []*Criteria `protobuf:"bytes,3,rep,name=criterias,proto3" json:"criterias,omitempty"`
	// source
	Source Source `protobuf:"varint,7,opt,name=source,proto3,enum=Source" json:"source,omitempty"`
	// identifier
	Identifier *ResourceIdentifier `protobuf:"bytes,8,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
}

func (x *GetAllAssistantConversationRequest) Reset() {
	*x = GetAllAssistantConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantConversationRequest) ProtoMessage() {}

func (x *GetAllAssistantConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantConversationRequest.ProtoReflect.Descriptor instead.
func (*GetAllAssistantConversationRequest) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllAssistantConversationRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *GetAllAssistantConversationRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllAssistantConversationRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllAssistantConversationRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_WEB_PLUGIN
}

func (x *GetAllAssistantConversationRequest) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type GetAllAssistantConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*AssistantConversation `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error                   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated               `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllAssistantConversationResponse) Reset() {
	*x = GetAllAssistantConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssistantConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssistantConversationResponse) ProtoMessage() {}

func (x *GetAllAssistantConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssistantConversationResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssistantConversationResponse) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllAssistantConversationResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllAssistantConversationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllAssistantConversationResponse) GetData() []*AssistantConversation {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllAssistantConversationResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllAssistantConversationResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

type GetAllConversationMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssistantId             uint64      `protobuf:"varint,1,opt,name=assistantId,proto3" json:"assistantId,omitempty"`
	AssistantConversationId uint64      `protobuf:"varint,2,opt,name=assistantConversationId,proto3" json:"assistantConversationId,omitempty"`
	Paginate                *Paginate   `protobuf:"bytes,3,opt,name=paginate,proto3" json:"paginate,omitempty"`
	Criterias               []*Criteria `protobuf:"bytes,4,rep,name=criterias,proto3" json:"criterias,omitempty"`
	Order                   *Ordering   `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	// source
	Source Source `protobuf:"varint,7,opt,name=source,proto3,enum=Source" json:"source,omitempty"`
	// identifier
	Identifier *ResourceIdentifier `protobuf:"bytes,8,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
}

func (x *GetAllConversationMessageRequest) Reset() {
	*x = GetAllConversationMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConversationMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationMessageRequest) ProtoMessage() {}

func (x *GetAllConversationMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationMessageRequest.ProtoReflect.Descriptor instead.
func (*GetAllConversationMessageRequest) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllConversationMessageRequest) GetAssistantId() uint64 {
	if x != nil {
		return x.AssistantId
	}
	return 0
}

func (x *GetAllConversationMessageRequest) GetAssistantConversationId() uint64 {
	if x != nil {
		return x.AssistantConversationId
	}
	return 0
}

func (x *GetAllConversationMessageRequest) GetPaginate() *Paginate {
	if x != nil {
		return x.Paginate
	}
	return nil
}

func (x *GetAllConversationMessageRequest) GetCriterias() []*Criteria {
	if x != nil {
		return x.Criterias
	}
	return nil
}

func (x *GetAllConversationMessageRequest) GetOrder() *Ordering {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetAllConversationMessageRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_WEB_PLUGIN
}

func (x *GetAllConversationMessageRequest) GetIdentifier() *ResourceIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type GetAllConversationMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32                           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success   bool                            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Data      []*AssistantConversationMessage `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Error     *Error                          `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Paginated *Paginated                      `protobuf:"bytes,5,opt,name=paginated,proto3" json:"paginated,omitempty"`
}

func (x *GetAllConversationMessageResponse) Reset() {
	*x = GetAllConversationMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_talk_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConversationMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConversationMessageResponse) ProtoMessage() {}

func (x *GetAllConversationMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_talk_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConversationMessageResponse.ProtoReflect.Descriptor instead.
func (*GetAllConversationMessageResponse) Descriptor() ([]byte, []int) {
	return file_talk_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllConversationMessageResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAllConversationMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetAllConversationMessageResponse) GetData() []*AssistantConversationMessage {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetAllConversationMessageResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetAllConversationMessageResponse) GetPaginated() *Paginated {
	if x != nil {
		return x.Paginated
	}
	return nil
}

var File_talk_api_proto protoreflect.FileDescriptor

var file_talk_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x6c, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x05, 0x0a, 0x1c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x17, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x17,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x98, 0x04, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0x51, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xff, 0x01, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x41, 0x47, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x1a,
	0x41, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xee, 0x04,
	0x0a, 0x15, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x18, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x18, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74,
	0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x1c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x84,
	0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x63, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x2a, 0xaf, 0x01, 0x0a, 0x08, 0x52, 0x41, 0x47, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x54,
	0x52, 0x49, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x55, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x32, 0xee, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x6c, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x6c, 0x6b,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x2e, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x61, 0x6c,
	0x6b, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x50, 0x0a, 0x17, 0x61, 0x69, 0x2e, 0x72, 0x61,
	0x70, 0x69, 0x64, 0x61, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c,
	0x65, 0x78, 0x61, 0x74, 0x69, 0x63, 0x2f, 0x77, 0x65, 0x62, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x78, 0x61, 0x74, 0x69,
	0x63, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_talk_api_proto_rawDescOnce sync.Once
	file_talk_api_proto_rawDescData = file_talk_api_proto_rawDesc
)

func file_talk_api_proto_rawDescGZIP() []byte {
	file_talk_api_proto_rawDescOnce.Do(func() {
		file_talk_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_talk_api_proto_rawDescData)
	})
	return file_talk_api_proto_rawDescData
}

var file_talk_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_talk_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_talk_api_proto_goTypes = []any{
	(RAGStage)(0),                               // 0: talk_api.RAGStage
	(*AssistantConversationMessage)(nil),        // 1: talk_api.AssistantConversationMessage
	(*CreateAssistantMessageRequest)(nil),       // 2: talk_api.CreateAssistantMessageRequest
	(*AssistantMessageStage)(nil),               // 3: talk_api.AssistantMessageStage
	(*CreateAssistantMessageResponse)(nil),      // 4: talk_api.CreateAssistantMessageResponse
	(*AssistantConversation)(nil),               // 5: talk_api.AssistantConversation
	(*GetAllAssistantConversationRequest)(nil),  // 6: talk_api.GetAllAssistantConversationRequest
	(*GetAllAssistantConversationResponse)(nil), // 7: talk_api.GetAllAssistantConversationResponse
	(*GetAllConversationMessageRequest)(nil),    // 8: talk_api.GetAllConversationMessageRequest
	(*GetAllConversationMessageResponse)(nil),   // 9: talk_api.GetAllConversationMessageResponse
	nil,                           // 10: talk_api.CreateAssistantMessageRequest.MetadataEntry
	nil,                           // 11: talk_api.AssistantMessageStage.AdditionalDataEntry
	(*Message)(nil),               // 12: Message
	(*Metric)(nil),                // 13: Metric
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(Source)(0),                   // 15: Source
	(*ResourceIdentifier)(nil),    // 16: ResourceIdentifier
	(*Error)(nil),                 // 17: Error
	(*User)(nil),                  // 18: User
	(*Paginate)(nil),              // 19: Paginate
	(*Criteria)(nil),              // 20: Criteria
	(*Paginated)(nil),             // 21: Paginated
	(*Ordering)(nil),              // 22: Ordering
	(*anypb.Any)(nil),             // 23: google.protobuf.Any
}
var file_talk_api_proto_depIdxs = []int32{
	12, // 0: talk_api.AssistantConversationMessage.request:type_name -> Message
	12, // 1: talk_api.AssistantConversationMessage.response:type_name -> Message
	13, // 2: talk_api.AssistantConversationMessage.metrics:type_name -> Metric
	3,  // 3: talk_api.AssistantConversationMessage.stages:type_name -> talk_api.AssistantMessageStage
	14, // 4: talk_api.AssistantConversationMessage.createdDate:type_name -> google.protobuf.Timestamp
	14, // 5: talk_api.AssistantConversationMessage.updatedDate:type_name -> google.protobuf.Timestamp
	12, // 6: talk_api.CreateAssistantMessageRequest.message:type_name -> Message
	10, // 7: talk_api.CreateAssistantMessageRequest.metadata:type_name -> talk_api.CreateAssistantMessageRequest.MetadataEntry
	15, // 8: talk_api.CreateAssistantMessageRequest.source:type_name -> Source
	16, // 9: talk_api.CreateAssistantMessageRequest.identifier:type_name -> ResourceIdentifier
	0,  // 10: talk_api.AssistantMessageStage.stage:type_name -> talk_api.RAGStage
	11, // 11: talk_api.AssistantMessageStage.additionalData:type_name -> talk_api.AssistantMessageStage.AdditionalDataEntry
	1,  // 12: talk_api.CreateAssistantMessageResponse.data:type_name -> talk_api.AssistantConversationMessage
	17, // 13: talk_api.CreateAssistantMessageResponse.error:type_name -> Error
	18, // 14: talk_api.AssistantConversation.user:type_name -> User
	1,  // 15: talk_api.AssistantConversation.assistantConversationMessage:type_name -> talk_api.AssistantConversationMessage
	14, // 16: talk_api.AssistantConversation.createdDate:type_name -> google.protobuf.Timestamp
	14, // 17: talk_api.AssistantConversation.updatedDate:type_name -> google.protobuf.Timestamp
	19, // 18: talk_api.GetAllAssistantConversationRequest.paginate:type_name -> Paginate
	20, // 19: talk_api.GetAllAssistantConversationRequest.criterias:type_name -> Criteria
	15, // 20: talk_api.GetAllAssistantConversationRequest.source:type_name -> Source
	16, // 21: talk_api.GetAllAssistantConversationRequest.identifier:type_name -> ResourceIdentifier
	5,  // 22: talk_api.GetAllAssistantConversationResponse.data:type_name -> talk_api.AssistantConversation
	17, // 23: talk_api.GetAllAssistantConversationResponse.error:type_name -> Error
	21, // 24: talk_api.GetAllAssistantConversationResponse.paginated:type_name -> Paginated
	19, // 25: talk_api.GetAllConversationMessageRequest.paginate:type_name -> Paginate
	20, // 26: talk_api.GetAllConversationMessageRequest.criterias:type_name -> Criteria
	22, // 27: talk_api.GetAllConversationMessageRequest.order:type_name -> Ordering
	15, // 28: talk_api.GetAllConversationMessageRequest.source:type_name -> Source
	16, // 29: talk_api.GetAllConversationMessageRequest.identifier:type_name -> ResourceIdentifier
	1,  // 30: talk_api.GetAllConversationMessageResponse.data:type_name -> talk_api.AssistantConversationMessage
	17, // 31: talk_api.GetAllConversationMessageResponse.error:type_name -> Error
	21, // 32: talk_api.GetAllConversationMessageResponse.paginated:type_name -> Paginated
	23, // 33: talk_api.CreateAssistantMessageRequest.MetadataEntry.value:type_name -> google.protobuf.Any
	2,  // 34: talk_api.TalkService.CreateAssistantMessage:input_type -> talk_api.CreateAssistantMessageRequest
	6,  // 35: talk_api.TalkService.GetAllAssistantConversation:input_type -> talk_api.GetAllAssistantConversationRequest
	8,  // 36: talk_api.TalkService.GetAllConversationMessage:input_type -> talk_api.GetAllConversationMessageRequest
	4,  // 37: talk_api.TalkService.CreateAssistantMessage:output_type -> talk_api.CreateAssistantMessageResponse
	7,  // 38: talk_api.TalkService.GetAllAssistantConversation:output_type -> talk_api.GetAllAssistantConversationResponse
	9,  // 39: talk_api.TalkService.GetAllConversationMessage:output_type -> talk_api.GetAllConversationMessageResponse
	37, // [37:40] is the sub-list for method output_type
	34, // [34:37] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_talk_api_proto_init() }
func file_talk_api_proto_init() {
	if File_talk_api_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_talk_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssistantMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantMessageStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAssistantMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AssistantConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllAssistantConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllConversationMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_talk_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllConversationMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_talk_api_proto_msgTypes[1].OneofWrappers = []any{}
	file_talk_api_proto_msgTypes[5].OneofWrappers = []any{}
	file_talk_api_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_talk_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_talk_api_proto_goTypes,
		DependencyIndexes: file_talk_api_proto_depIdxs,
		EnumInfos:         file_talk_api_proto_enumTypes,
		MessageInfos:      file_talk_api_proto_msgTypes,
	}.Build()
	File_talk_api_proto = out.File
	file_talk_api_proto_rawDesc = nil
	file_talk_api_proto_goTypes = nil
	file_talk_api_proto_depIdxs = nil
}
